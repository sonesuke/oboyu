name: Publish Release to PyPI and GitHub Packages

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Stable release: v0.2.0

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Lint with ruff
      run: uv run ruff check --fix
    
    - name: Type check with mypy
      run: uv run mypy
    
    - name: Run full test suite
      run: uv run pytest --cov=src

  # Run comprehensive installation tests before release
  installation-tests:
    uses: ./.github/workflows/test-installation.yml
    
  build:
    needs: [test, installation-tests]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install build dependencies
      run: uv sync
    
    - name: Verify tag format
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
    
    - name: Build package
      run: uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi-release
      url: https://pypi.org/p/oboyu
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    
  create-github-release:
    needs: publish-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Generate Changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        configuration: |
          {
            "categories": [
              {
                "title": "## 🚀 Features",
                "labels": ["feat", "enhancement"]
              },
              {
                "title": "## 🐛 Bug Fixes",
                "labels": ["fix", "bug"]
              },
              {
                "title": "## 📚 Documentation",
                "labels": ["docs"]
              },
              {
                "title": "## 🔧 Maintenance",
                "labels": ["chore", "refactor"]
              },
              {
                "title": "## 🎨 Style",
                "labels": ["style"]
              },
              {
                "title": "## 🚨 Tests",
                "labels": ["test"]
              }
            ],
            "template": "# Changelog\n\n${{CHANGELOG}}\n\n**Full Changelog**: ${{RELEASE_DIFF}}\n",
            "pr_template": "- ${{TITLE}} (#${{NUMBER}})",
            "empty_template": "No changes.",
            "sort": "ASC",
            "max_pull_requests": 100,
            "max_back_track_time_days": 365,
            "base_branches": ["main"]
          }
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Version from Tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 📦 Installation
          
          ```bash
          pip install oboyu==${{ steps.version.outputs.version }}
          ```
          
          ## 🐳 GitHub Packages
          
          This release is also available on GitHub Packages:
          ```bash
          pip install oboyu --index-url https://ghcr.io/sonesuke/oboyu
          ```
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        files: |
          dist/*.whl
          dist/*.tar.gz
    
    - name: Update CHANGELOG.md
      run: |
        # Extract version without 'v' prefix
        VERSION=${GITHUB_REF#refs/tags/v}
        DATE=$(date +%Y-%m-%d)
        
        # Create temporary file with new changelog entry
        echo "# Changelog" > CHANGELOG.tmp.md
        echo "" >> CHANGELOG.tmp.md
        echo "## [$VERSION] - $DATE" >> CHANGELOG.tmp.md
        echo "" >> CHANGELOG.tmp.md
        echo "${{ steps.changelog.outputs.changelog }}" | sed 's/^# Changelog//' >> CHANGELOG.tmp.md
        echo "" >> CHANGELOG.tmp.md
        
        # Append existing changelog if it exists
        if [ -f CHANGELOG.md ]; then
          # Skip the first line if it's "# Changelog"
          if head -n 1 CHANGELOG.md | grep -q "^# Changelog"; then
            tail -n +2 CHANGELOG.md >> CHANGELOG.tmp.md
          else
            cat CHANGELOG.md >> CHANGELOG.tmp.md
          fi
        fi
        
        # Replace the old file
        mv CHANGELOG.tmp.md CHANGELOG.md
    
    - name: Commit CHANGELOG.md
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add CHANGELOG.md
        git commit -m "chore: update CHANGELOG.md for ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"
        git push origin HEAD:main || echo "Failed to push (might be protected branch)"
  
  publish-github-packages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install twine
      run: pip install twine
    
    - name: Configure GitHub Packages
      run: |
        cat > ~/.pypirc << EOF
        [distutils]
        index-servers = github
        
        [github]
        repository: https://upload.pypi.org/legacy/
        username: __token__
        password: ${{ secrets.GITHUB_TOKEN }}
        EOF
    
    - name: Publish to GitHub Packages
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        TWINE_REPOSITORY_URL: https://ghcr.io/sonesuke/oboyu
      run: |
        python -m twine upload --skip-existing dist/* || echo "GitHub Packages publishing not yet configured"