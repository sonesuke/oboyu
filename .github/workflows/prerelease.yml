name: Publish Prerelease to PyPI and GitHub Packages

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+a[0-9]+'  # Alpha: v0.2.0a1
      - 'v[0-9]+.[0-9]+.[0-9]+b[0-9]+'  # Beta: v0.2.0b1
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+' # Release Candidate: v0.2.0rc1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Lint with ruff
      run: uv run ruff check --fix
    
    - name: Type check with mypy
      run: uv run mypy
    
    - name: Run tests
      run: uv run pytest --cov=src

  # Run comprehensive installation tests before prerelease
  installation-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
        install-method: ['source', 'wheel']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git \
            curl \
            build-essential \
            cmake \
            pkg-config \
            libfreetype6-dev \
            libfontconfig1-dev \
            libjpeg-dev \
            libpng-dev \
            zlib1g-dev \
            libssl-dev \
            python3-dev
          sudo rm -rf /var/lib/apt/lists/*
      
      - name: Install from source
        if: matrix.install-method == 'source'
        run: |
          python -m venv test-env
          test-env/bin/pip install -e .
          
      - name: Install from wheel
        if: matrix.install-method == 'wheel'
        run: |
          python -m venv test-env
          test-env/bin/pip install build
          test-env/bin/python -m build --wheel
          test-env/bin/pip install dist/*.whl
          
      - name: Verify installation
        run: |
          test-env/bin/python -c "import oboyu; print(oboyu.__version__)"
          test-env/bin/oboyu --help
          
      - name: Run basic functionality test
        run: |
          test-env/bin/oboyu version
    
  build:
    needs: [test, installation-tests]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install build dependencies
      run: uv sync
    
    - name: Verify tag format
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
    
    - name: Build package
      run: uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-prerelease:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi-prerelease
      url: https://pypi.org/p/oboyu
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
  
  create-github-prerelease:
    needs: publish-prerelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Generate Changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        configuration: |
          {
            "categories": [
              {
                "title": "## 🚀 Features",
                "labels": ["feat", "enhancement"]
              },
              {
                "title": "## 🐛 Bug Fixes",
                "labels": ["fix", "bug"]
              },
              {
                "title": "## 📚 Documentation",
                "labels": ["docs"]
              },
              {
                "title": "## 🔧 Maintenance",
                "labels": ["chore", "refactor"]
              },
              {
                "title": "## 🎨 Style",
                "labels": ["style"]
              },
              {
                "title": "## 🚨 Tests",
                "labels": ["test"]
              }
            ],
            "template": "# Changelog\n\n${{CHANGELOG}}\n\n**Full Changelog**: ${{RELEASE_DIFF}}\n",
            "pr_template": "- ${{TITLE}} (#${{NUMBER}})",
            "empty_template": "No changes.",
            "sort": "ASC",
            "max_pull_requests": 100,
            "max_back_track_time_days": 365,
            "base_branches": ["main"]
          }
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Version from Tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Determine Prerelease Type
      id: prerelease_type
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ $VERSION == *"a"* ]]; then
          echo "type=Alpha" >> $GITHUB_OUTPUT
          echo "emoji=🧪" >> $GITHUB_OUTPUT
        elif [[ $VERSION == *"b"* ]]; then
          echo "type=Beta" >> $GITHUB_OUTPUT
          echo "emoji=🔧" >> $GITHUB_OUTPUT
        elif [[ $VERSION == *"rc"* ]]; then
          echo "type=Release Candidate" >> $GITHUB_OUTPUT
          echo "emoji=🎯" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Prerelease
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: ${{ steps.prerelease_type.outputs.emoji }} ${{ steps.prerelease_type.outputs.type }} ${{ steps.version.outputs.version }}
        body: |
          ## 🔬 Prerelease: ${{ steps.prerelease_type.outputs.type }}
          
          This is a prerelease version intended for testing and early feedback.
          
          ## 📦 Installation
          
          ```bash
          pip install --pre oboyu==${{ steps.version.outputs.version }}
          ```
          
          ## 🐳 GitHub Packages
          
          This prerelease is also available on GitHub Packages:
          ```bash
          pip install --pre oboyu --index-url https://ghcr.io/sonesuke/oboyu
          ```
          
          ## ⚠️ Important Note
          
          This is a **${{ steps.prerelease_type.outputs.type }}** release and may contain bugs or incomplete features. Use in production at your own risk.
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: true
        files: |
          dist/*.whl
          dist/*.tar.gz
  
  publish-github-packages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install twine
      run: pip install twine
    
    - name: Configure GitHub Packages
      run: |
        cat > ~/.pypirc << EOF
        [distutils]
        index-servers = github
        
        [github]
        repository: https://upload.pypi.org/legacy/
        username: __token__
        password: ${{ secrets.GITHUB_TOKEN }}
        EOF
    
    - name: Publish to GitHub Packages
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        TWINE_REPOSITORY_URL: https://ghcr.io/sonesuke/oboyu
      run: |
        python -m twine upload --skip-existing dist/* || echo "GitHub Packages publishing not yet configured"