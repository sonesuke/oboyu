# Multi-stage Dockerfile for testing oboyu installation in clean environments

# Base stage with Python 3.13
FROM python:3.13-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    cmake \
    pkg-config \
    libfreetype6-dev \
    libfontconfig1-dev \
    libjpeg-dev \
    libpng-dev \
    zlib1g-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for testing
RUN useradd -m -s /bin/bash testuser
WORKDIR /home/testuser

# Stage 1: Test pip installation from source
FROM base as test-pip-source

# Copy the entire project
COPY --chown=testuser:testuser . /home/testuser/oboyu/

USER testuser

# Create fresh virtual environment and test installation with disk space optimization
RUN python -m venv /home/testuser/venv-source
RUN . /home/testuser/venv-source/bin/activate && pip install --upgrade pip
RUN . /home/testuser/venv-source/bin/activate && \
    pip install --index-url https://download.pytorch.org/whl/cpu torch && \
    pip cache purge
RUN . /home/testuser/venv-source/bin/activate && \
    cd /home/testuser/oboyu && \
    pip install . && \
    pip cache purge

# Test the installation
RUN . /home/testuser/venv-source/bin/activate && \
    python -c "import oboyu; print('Source installation successful')" && \
    oboyu --help

# Stage 2: Test pip installation from wheel
FROM base as test-pip-wheel

# Copy only the built wheel (will be created by build script)
COPY --chown=testuser:testuser dist/*.whl /home/testuser/dist/

USER testuser

# Create fresh virtual environment and test wheel installation with disk space optimization
RUN python -m venv /home/testuser/venv-wheel
RUN . /home/testuser/venv-wheel/bin/activate && pip install --upgrade pip
RUN . /home/testuser/venv-wheel/bin/activate && \
    pip install --index-url https://download.pytorch.org/whl/cpu torch && \
    pip cache purge
RUN . /home/testuser/venv-wheel/bin/activate && \
    pip install /home/testuser/dist/*.whl && \
    pip cache purge

# Test the installation
RUN . /home/testuser/venv-wheel/bin/activate && \
    python -c "import oboyu; print('Wheel installation successful')" && \
    oboyu --help

# Stage 3: Test pip editable installation
FROM base as test-pip-editable

# Copy the entire project
COPY --chown=testuser:testuser . /home/testuser/oboyu/

USER testuser

# Create fresh virtual environment and test editable installation with disk space optimization
RUN python -m venv /home/testuser/venv-editable
RUN . /home/testuser/venv-editable/bin/activate && pip install --upgrade pip
RUN . /home/testuser/venv-editable/bin/activate && \
    pip install --index-url https://download.pytorch.org/whl/cpu torch && \
    pip cache purge
RUN . /home/testuser/venv-editable/bin/activate && \
    cd /home/testuser/oboyu && \
    pip install -e . && \
    pip cache purge

# Test the installation
RUN . /home/testuser/venv-editable/bin/activate && \
    python -c "import oboyu; print('Editable installation successful')" && \
    oboyu --help

# Stage 4: Test pip installation with UV
FROM base as test-uv

# Install UV
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Copy the entire project
COPY --chown=testuser:testuser . /home/testuser/oboyu/

USER testuser
ENV PATH="/home/testuser/.local/bin:$PATH"

# Install UV for user
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Test UV installation with disk space optimization
WORKDIR /home/testuser/oboyu
RUN uv venv

# Install with optimizations to reduce disk usage
# Use CPU-only PyTorch to reduce size and clear cache after each step
RUN uv pip install --index-url https://download.pytorch.org/whl/cpu torch && \
    rm -rf /home/testuser/.cache/uv
RUN uv pip install . && \
    rm -rf /home/testuser/.cache/uv

# Test using virtual environment Python directly
RUN .venv/bin/python -c "import oboyu; print('UV installation successful')"
RUN .venv/bin/python -m oboyu --help

# Final stage: Run all tests
FROM base as test-runner

# Copy test results from all stages
COPY --from=test-pip-source /home/testuser/venv-source /home/testuser/venv-source
COPY --from=test-pip-wheel /home/testuser/venv-wheel /home/testuser/venv-wheel
COPY --from=test-pip-editable /home/testuser/venv-editable /home/testuser/venv-editable
COPY --from=test-uv /home/testuser/oboyu/.venv /home/testuser/.venv

# Add test validation script
COPY --chown=testuser:testuser validate_installations.py /home/testuser/validate_installations.py

USER testuser
RUN chmod +x /home/testuser/validate_installations.py

# Default command runs the validation script
CMD ["/home/testuser/validate_installations.py"]