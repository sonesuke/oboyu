#!/bin/bash

# Script to handle pre-commit failures and apply automated fixes
# Focused on resolving pre-commit hook errors rather than duplicating functionality

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log with timestamp
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log "${RED}‚ùå Not in a git repository${NC}"
        exit 1
    fi
}

# Function to check if there are uncommitted changes
has_uncommitted_changes() {
    ! git diff-index --quiet HEAD --
}

# Function to run pre-commit and handle failures
run_pre_commit_with_fixes() {
    log "${BLUE}üîß Running pre-commit hooks and handling failures...${NC}"
    
    # Attempt pre-commit run
    if pre-commit run --all-files; then
        log "${GREEN}‚úÖ All pre-commit hooks passed${NC}"
        return 0
    else
        log "${YELLOW}‚ö†Ô∏è  Pre-commit hooks failed. Attempting auto-fixes...${NC}"
        
        # Pre-commit may have made auto-fixes (like ruff format, ruff check --fix)
        # Check if files were modified
        if has_uncommitted_changes; then
            log "${GREEN}üîß Pre-commit hooks applied auto-fixes${NC}"
            
            # Run pre-commit again to see if fixes resolved issues
            if pre-commit run --all-files; then
                log "${GREEN}‚úÖ Pre-commit hooks now pass after auto-fixes${NC}"
                return 0
            else
                log "${YELLOW}‚ö†Ô∏è  Some pre-commit issues remain after auto-fixes${NC}"
                return 1
            fi
        else
            log "${RED}‚ùå Pre-commit failed but no auto-fixes were applied${NC}"
            return 1
        fi
    fi
}

# Function to handle specific pre-commit hook failures
analyze_pre_commit_failures() {
    log "${BLUE}üîç Analyzing pre-commit failure patterns...${NC}"
    
    # Run individual hooks to identify specific failures
    local hooks_to_check=("ruff-format" "ruff-check" "mypy" "pytest")
    local failed_hooks=()
    
    for hook in "${hooks_to_check[@]}"; do
        if ! pre-commit run "$hook" --all-files 2>/dev/null; then
            failed_hooks+=("$hook")
        fi
    done
    
    if [ ${#failed_hooks[@]} -eq 0 ]; then
        log "${GREEN}‚úÖ All major hooks are passing${NC}"
        return 0
    fi
    
    log "${YELLOW}üìã Failed hooks detected:${NC}"
    for hook in "${failed_hooks[@]}"; do
        echo "  - $hook"
    done
    
    # Provide specific guidance for each failure type
    for hook in "${failed_hooks[@]}"; do
        case "$hook" in
            "ruff-format"|"ruff-check")
                log "${YELLOW}üí° Ruff issues: Run 'pre-commit run ruff-format ruff-check --all-files' to auto-fix${NC}"
                ;;
            "mypy")
                log "${YELLOW}üí° Type checking issues: Review mypy output and add type annotations${NC}"
                ;;
            "pytest")
                log "${YELLOW}üí° Test failures: Review pytest output and fix failing tests${NC}"
                ;;
        esac
    done
    
    return 1
}

# Function to commit changes if any were made
commit_fixes() {
    if has_uncommitted_changes; then
        log "${BLUE}üìù Committing pre-commit auto-fixes...${NC}"
        
        # Add all changes
        git add .
        
        # Create a descriptive commit message
        local commit_msg="fix: auto-fix pre-commit hook failures

ü§ñ Pre-commit auto-fixes applied:
- Applied automated fixes from pre-commit hooks
- Code quality improvements via pre-commit system

Generated by fix-common-issues.sh (pre-commit handler)"
        
        # Commit the changes
        git commit -m "$commit_msg"
        
        log "${GREEN}‚úÖ Pre-commit auto-fixes committed${NC}"
        
        # Push the changes
        if git push; then
            log "${GREEN}‚úÖ Changes pushed to remote${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  Failed to push changes. You may need to push manually.${NC}"
        fi
    else
        log "${BLUE}‚ÑπÔ∏è  No changes to commit${NC}"
    fi
}

# Function to display summary
display_summary() {
    log "${BLUE}üìä Pre-commit Handler Summary:${NC}"
    echo "  üîß Pre-commit hooks executed with auto-fix handling"
    echo "  ‚úÖ Auto-fixable issues resolved via pre-commit system"
    echo "  üìã Manual intervention guidance provided for remaining issues"
    echo ""
    echo "Next steps:"
    echo "  - Review any remaining pre-commit failures"
    echo "  - Address manual issues identified by hooks"
    echo "  - Re-run pre-commit to verify all hooks pass"
    echo "  - Monitor CI/CD pipeline for updated results"
}

# Main execution function
main() {
    log "${BLUE}üöÄ Starting pre-commit failure handling...${NC}"
    
    # Check prerequisites
    check_git_repo
    
    # Record initial state
    if has_uncommitted_changes; then
        log "${YELLOW}‚ö†Ô∏è  Uncommitted changes detected. These will be included in any fix commit.${NC}"
    fi
    
    # Run pre-commit with auto-fix handling
    local pre_commit_passed=false
    if run_pre_commit_with_fixes; then
        pre_commit_passed=true
    fi
    
    # Commit any auto-fixes applied by pre-commit
    commit_fixes
    
    # If pre-commit still fails, analyze specific failures
    if [ "$pre_commit_passed" = false ]; then
        analyze_pre_commit_failures
    fi
    
    # Display summary
    display_summary
    
    # Exit with appropriate status
    if [ "$pre_commit_passed" = true ]; then
        log "${GREEN}üéâ All pre-commit hooks are now passing!${NC}"
        exit 0
    else
        log "${YELLOW}‚ö†Ô∏è  Some pre-commit issues require manual intervention${NC}"
        exit 1
    fi
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo ""
        echo "Handles pre-commit hook failures and applies automated fixes:"
        echo "  - Runs pre-commit hooks and handles failures"
        echo "  - Applies auto-fixes available through pre-commit system"
        echo "  - Analyzes specific hook failures for manual intervention guidance"
        echo "  - Commits and pushes any auto-fixes applied"
        echo ""
        echo "This script is focused on pre-commit error handling rather than"
        echo "duplicating the functionality already provided by pre-commit hooks."
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo ""
        echo "The script leverages pre-commit's built-in auto-fix capabilities"
        echo "and provides intelligent handling of hook failures."
        exit 0
        ;;
    "")
        # No arguments - run normally
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac

# Run main function
main