#!/bin/bash

# Script to automatically fix common CI/CD issues
# Handles linting, formatting, import ordering, and basic type checking issues

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log with timestamp
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log "${RED}‚ùå Not in a git repository${NC}"
        exit 1
    fi
}

# Function to check if there are uncommitted changes
has_uncommitted_changes() {
    ! git diff-index --quiet HEAD --
}

# Function to run linting and formatting fixes
fix_linting_issues() {
    log "${BLUE}üîß Running Ruff to fix linting and formatting issues...${NC}"
    
    # Run ruff check with auto-fix
    if uv run ruff check --fix .; then
        log "${GREEN}‚úÖ Ruff linting fixes applied${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Some ruff issues could not be auto-fixed${NC}"
    fi
    
    # Run ruff format to fix formatting
    if uv run ruff format .; then
        log "${GREEN}‚úÖ Ruff formatting applied${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Ruff formatting encountered issues${NC}"
    fi
}

# Function to check and fix import ordering
fix_import_issues() {
    log "${BLUE}üîß Checking import ordering...${NC}"
    
    # Ruff already handles import sorting with I001-I005 rules
    # This is covered by the ruff check --fix command above
    log "${GREEN}‚úÖ Import ordering handled by Ruff${NC}"
}

# Function to run type checking and attempt basic fixes
check_type_issues() {
    log "${BLUE}üîç Running MyPy type checking...${NC}"
    
    # Run mypy to check for type issues
    if uv run mypy; then
        log "${GREEN}‚úÖ No type checking issues found${NC}"
        return 0
    else
        log "${YELLOW}‚ö†Ô∏è  Type checking issues detected${NC}"
        log "${YELLOW}üí° Type issues typically require manual intervention${NC}"
        log "${YELLOW}   Common fixes:${NC}"
        echo "   - Add type annotations to function parameters and return values"
        echo "   - Import missing types (from typing import List, Dict, Optional, etc.)"
        echo "   - Fix type mismatches in variable assignments"
        echo "   - Add # type: ignore comments for complex cases"
        return 1
    fi
}

# Function to run fast tests
run_fast_tests() {
    log "${BLUE}üß™ Running fast tests...${NC}"
    
    if uv run pytest -m "not slow" -k "not integration" --tb=short; then
        log "${GREEN}‚úÖ Fast tests passed${NC}"
        return 0
    else
        log "${RED}‚ùå Some fast tests failed${NC}"
        log "${YELLOW}üí° Test failures typically require manual code fixes${NC}"
        return 1
    fi
}

# Function to commit changes if any were made
commit_fixes() {
    if has_uncommitted_changes; then
        log "${BLUE}üìù Committing auto-fixes...${NC}"
        
        # Add all changes
        git add .
        
        # Create a descriptive commit message
        local commit_msg="fix: auto-fix linting, formatting, and import issues

ü§ñ Automated fixes applied:
- Ruff linting auto-fixes
- Code formatting standardization
- Import ordering corrections

Generated by fix-common-issues.sh script"
        
        # Commit the changes
        git commit -m "$commit_msg"
        
        log "${GREEN}‚úÖ Auto-fixes committed${NC}"
        
        # Push the changes
        if git push; then
            log "${GREEN}‚úÖ Changes pushed to remote${NC}"
        else
            log "${YELLOW}‚ö†Ô∏è  Failed to push changes. You may need to push manually.${NC}"
        fi
    else
        log "${BLUE}‚ÑπÔ∏è  No changes to commit${NC}"
    fi
}

# Function to display summary
display_summary() {
    log "${BLUE}üìä Fix Summary:${NC}"
    echo "  ‚úÖ Linting and formatting fixes applied"
    echo "  ‚úÖ Import ordering checked"
    echo "  üîç Type checking performed"
    echo "  üß™ Fast tests executed"
    echo ""
    echo "Next steps:"
    echo "  - Review the committed changes"
    echo "  - Address any remaining type checking issues manually"
    echo "  - Fix any test failures that require code changes"
    echo "  - Monitor CI/CD pipeline for updated results"
}

# Main execution function
main() {
    log "${BLUE}üöÄ Starting automated issue fixing...${NC}"
    
    # Check prerequisites
    check_git_repo
    
    # Record initial state
    local had_initial_changes=false
    if has_uncommitted_changes; then
        had_initial_changes=true
        log "${YELLOW}‚ö†Ô∏è  Uncommitted changes detected. These will be included in the fix commit.${NC}"
    fi
    
    # Apply fixes
    fix_linting_issues
    fix_import_issues
    
    # Commit linting/formatting fixes first
    commit_fixes
    
    # Run additional checks
    local type_check_passed=true
    local tests_passed=true
    
    if ! check_type_issues; then
        type_check_passed=false
    fi
    
    if ! run_fast_tests; then
        tests_passed=false
    fi
    
    # Display summary
    display_summary
    
    # Exit with appropriate status
    if [ "$type_check_passed" = true ] && [ "$tests_passed" = true ]; then
        log "${GREEN}üéâ All automated fixes completed successfully!${NC}"
        exit 0
    else
        log "${YELLOW}‚ö†Ô∏è  Some issues require manual intervention${NC}"
        exit 1
    fi
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo ""
        echo "Automatically fixes common CI/CD issues including:"
        echo "  - Linting errors (via ruff check --fix)"
        echo "  - Code formatting (via ruff format)"
        echo "  - Import ordering (via ruff I001-I005 rules)"
        echo "  - Runs type checking and fast tests for validation"
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo ""
        echo "The script will automatically commit and push any fixes applied."
        exit 0
        ;;
    "")
        # No arguments - run normally
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac

# Run main function
main